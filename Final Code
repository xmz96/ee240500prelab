#include "simpletools.h"
#include "servo.h"
#include "fdserial.h"
#include "wavplayer.h"
#include "servodiffdrive.h"
#include "ping.h"                             // Include ping header
#include "abdrive.h"                          // Include abdrive header
#define PIN_SOUND       26 // pin for the speaker, default=26
#define PIN_XBEE_RX      0
#define PIN_XBEE_TX      1
#define PIN_SERVO_LEFT  14
#define PIN_SERVO_RIGHT 15
#define PIN_SERVO_MID 16

volatile int ch;
volatile int XeeChange=0;
volatile int cmDist=0;
volatile int turn=0;
volatile unsigned int lockR;            // Lock ID 
int DO = 22, CLK = 23, DI = 24, CS = 25;        // SD I/O pins
int * cog_ptr[8];

int degreeindex=0;
int pinLeft, pinRight, rampLeft, rampRight;   // Variables shared by functions
volatile fdserial *xbee;
int t,distance, setPoint, errorVal, kp, speed; 

void XBee();
char char2lowercase(char c);
void go();

int main (void) {
   servo_speed(14,0); //initialize at stationary speed=0
  servo_speed(15,0);
    kp = -10;                                   // Proportional control
  
  xbee = fdserial_open(PIN_XBEE_RX, PIN_XBEE_TX, 0, 9600);
  sd_mount(DO, CLK, DI, CS);                      // Mount SD card
  drive_pins(PIN_SERVO_LEFT, PIN_SERVO_RIGHT);    // Set the Left and Right servos
  print("=================================\n");
  print("  Propeller Boe-Bot following robot \n");
  print("=================================\n\n");
  print("[1]stop\n");
  print("[2] go\n");
  
  cog_ptr[1] = cog_run(&XBee,32);
  
  while(1)
  {
    if(XeeChange)
    {
      ch = char2lowercase(ch);
      switch ((char) ch)
      {
        case '1':
          servo_stop();
          break;
        case '2':
           go();
           pause(2000);
          break;
      }     
      XeeChange = 0;
    }   
    pause(1);
  }    

  return 0;
}


void XBee()
{
   putchar(CLS);
   fdserial_rxFlush(xbee);
   while(1){
     ch = fdserial_rxChar(xbee);
     XeeChange = 1;
     fdserial_txChar(xbee, ch);
     fdserial_txFlush(xbee);
   }
}  

char char2lowercase(char c)
{
	return ('A'<=c && c<='Z') ? c+32 : c;
}

void go()
{   high(5);                                  // Set P5 high
    pause(1);                                 // Wait for circuit to charge
    t = rc_time(5, 1);                    // Measure decay time on P5
    //print("t = %d\n", t);                     // Display decay time
    if(t<300)
    {low(26);
     setPoint = 32;//more light,longer distance
    }    
    else 
    {high(26);
     setPoint = 20;//less light,shorter distance,lighten the LED for illumination
    }      
    //print("%c setPoint= %d%c cm",HOME, setPoint, CLREOL);
    distance = ping_cm(8);                    // Measure distance
    //print("%c distance = %d%c cm",HOME, distance, CLREOL);
    errorVal = setPoint - distance;           // Calculate error
    speed = kp * errorVal;                    // Calculate correction speed
    if(speed > 128) speed = 128;              // Limit top speed
    if(speed < -128) speed = -128;
    //print("%c speed = %d%c cm",HOME, speed, CLREOL);
    //drive_rampStep(speed, speed);             // Use result for following
    servo_setramp(14,1);
    servo_setramp(15,1);
    servo_speed(15,-1*speed);
    servo_speed(14,speed);
    pause(100);                               // Wait 1/10th of a second  
}   
